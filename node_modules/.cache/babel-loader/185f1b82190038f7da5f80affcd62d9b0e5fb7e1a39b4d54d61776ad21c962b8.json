{"ast":null,"code":"var _jsxFileName = \"/Users/sadegh/Desktop/Projects/project-one/functional/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { Component, useState } from \"react\";\nimport ToDo from \"./components/ToDo/ToDo\";\nimport Completed from \"./components/Completed/Completed\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet lastGeneratedKey = 0;\nexport default function App() {\n  _s();\n  const [reminders, setReminders] = useState([]);\n  const [allReminders, setAllReminders] = useState([]);\n  const [completedReminders, setCompletedReminders] = useState([]);\n  const [uncompletedReminders, setUncompletedReminders] = useState([]);\n  const [status, setStatus] = useState([\"true\", \"false\", \"false\"]);\n  const [newReminder, setNewReminder] = useState(\"\");\n  const showingReminders = () => {\n    let arr = [];\n    if (status[0]) {\n      arr = allReminders;\n    } else if (status[1]) {\n      arr = completedReminders;\n    } else if (status[2]) {\n      arr = uncompletedReminders;\n    }\n    setReminders({\n      reminders: arr\n    });\n  };\n  const changeNewReminderContent = event => {\n    setNewReminder({\n      newReminder: event.target.value\n    });\n  };\n  const addNewReminder = () => {\n    const newReminder = {\n      status: \"uncompleted\",\n      task: newReminder,\n      ID: lastGeneratedKey++\n    };\n    setAllReminders(prevState => {\n      const allReminders = [newReminder, ...prevState.allReminders];\n      return {\n        allReminders\n      };\n    });\n    setUncompletedReminders(prevState => {\n      const uncompletedReminders = [newReminder, ...prevState.uncompletedReminders];\n      return {\n        uncompletedReminders\n      };\n    });\n    showingReminders();\n  };\n  const markReminderAsCompleted = reminderIndex => {\n    setState(prevState => {\n      const allReminders = [...prevState.allReminders];\n      allReminders[reminderIndex].status = \"completed\";\n      const unCompletedReminders = allReminders.filter(reminder => reminder.status === \"uncompleted\");\n      return {\n        allReminders,\n        completedReminders,\n        unCompletedReminders\n      };\n    }, showingReminders);\n    const completedReminders = allReminders.filter(reminder => reminder.status === \"completed\");\n  };\n  const showAllReminders = () => {\n    setState({\n      all: true,\n      completed: false,\n      uncompleted: false\n    }, showingReminders);\n  };\n  const showCompletedReminders = () => {\n    setState({\n      all: false,\n      completed: true,\n      uncompleted: false\n    }, showingReminders);\n  };\n  const showUncompletedReminders = () => {\n    setState({\n      all: false,\n      completed: false,\n      uncompleted: true\n    }, showingReminders);\n  };\n  const removeElement = (allReminderIndex, completedRemindersIndex) => {\n    let allReminders = allReminders;\n    let completedReminders = completedReminders;\n    allReminders.splice(allReminderIndex, 1);\n    completedReminders.splice(completedRemindersIndex, 1);\n    setState({\n      allReminders: allReminders,\n      completedReminders: completedReminders\n    });\n    showingReminders();\n  };\n  let mainStyle = {\n    height: \"240px\"\n  };\n  if (reminders.length >= 1) {\n    mainStyle = {\n      height: 240 + 21.5 * reminders.length\n    };\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    style: mainStyle,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      className: \"Task\",\n      onChange: changeNewReminderContent,\n      value: newReminder,\n      placeholder: \"Enter Your New Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"addButton\",\n      type: \"button\",\n      onClick: addNewReminder,\n      value: \"Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 7\n    }, this), reminders.map(item => {\n      if (item.status === \"completed\") {\n        return /*#__PURE__*/_jsxDEV(Completed, {\n          task: item.task,\n          click: () => removeElement(allReminders.indexOf(item), completedReminders.indexOf(item))\n        }, item.ID, false, {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 13\n        }, this);\n      }\n      return /*#__PURE__*/_jsxDEV(ToDo, {\n        task: item.task,\n        click: () => setTimeout(() => markReminderAsCompleted(allReminders.indexOf(item)), 500)\n      }, item.ID, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 11\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"all\",\n      onClick: showAllReminders,\n      children: \"All\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"all\",\n      onClick: showCompletedReminders,\n      children: \"Completed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"all\",\n      onClick: showUncompletedReminders,\n      children: \"Uncompleted\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"2OYAemISAGd/pIw2iYgnli3Nuoo=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Component","useState","ToDo","Completed","jsxDEV","_jsxDEV","lastGeneratedKey","App","_s","reminders","setReminders","allReminders","setAllReminders","completedReminders","setCompletedReminders","uncompletedReminders","setUncompletedReminders","status","setStatus","newReminder","setNewReminder","showingReminders","arr","changeNewReminderContent","event","target","value","addNewReminder","task","ID","prevState","markReminderAsCompleted","reminderIndex","setState","unCompletedReminders","filter","reminder","showAllReminders","all","completed","uncompleted","showCompletedReminders","showUncompletedReminders","removeElement","allReminderIndex","completedRemindersIndex","splice","mainStyle","height","length","className","style","children","type","onChange","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","item","click","indexOf","setTimeout","_c","$RefreshReg$"],"sources":["/Users/sadegh/Desktop/Projects/project-one/functional/src/App.jsx"],"sourcesContent":["import React, { Component, useState } from \"react\";\nimport ToDo from \"./components/ToDo/ToDo\";\nimport Completed from \"./components/Completed/Completed\";\nimport \"./App.css\";\n\nlet lastGeneratedKey = 0;\n\nexport default function App() {\n  const [reminders, setReminders] = useState([]);\n  const [allReminders, setAllReminders] = useState([]);\n  const [completedReminders, setCompletedReminders] = useState([]);\n  const [uncompletedReminders, setUncompletedReminders] = useState([]);\n  const [status, setStatus] = useState([\"true\", \"false\", \"false\"]);\n  const [newReminder, setNewReminder] = useState(\"\");\n\n  const showingReminders = () => {\n    let arr = [];\n    if (status[0]) {\n      arr = allReminders;\n    } else if (status[1]) {\n      arr = completedReminders;\n    } else if (status[2]) {\n      arr = uncompletedReminders;\n    }\n    setReminders({ reminders: arr });\n  };\n\n  const changeNewReminderContent = (event) => {\n    setNewReminder({ newReminder: event.target.value });\n  };\n\n  const addNewReminder = () => {\n    const newReminder = {\n      status: \"uncompleted\",\n      task: newReminder,\n      ID: lastGeneratedKey++,\n    };\n    setAllReminders((prevState) => {\n      const allReminders = [newReminder, ...prevState.allReminders];\n      return { allReminders };\n    });\n    setUncompletedReminders((prevState) => {\n      const uncompletedReminders = [newReminder, ...prevState.uncompletedReminders];\n      return { uncompletedReminders };\n    });\n    showingReminders();\n  };\n\n  const markReminderAsCompleted = (reminderIndex) => {\n    setState((prevState) => {\n      const allReminders = [...prevState.allReminders];\n      allReminders[reminderIndex].status = \"completed\";\n      \n      const unCompletedReminders = allReminders.filter(\n        (reminder) => reminder.status === \"uncompleted\"\n      );\n      return { allReminders, completedReminders, unCompletedReminders };\n    }, showingReminders);\n    const completedReminders = allReminders.filter(\n      (reminder) => reminder.status === \"completed\"\n    );\n  };\n\n  const showAllReminders = () => {\n    setState(\n      { all: true, completed: false, uncompleted: false },\n      showingReminders\n    );\n  };\n\n  const showCompletedReminders = () => {\n    setState(\n      { all: false, completed: true, uncompleted: false },\n      showingReminders\n    );\n  };\n\n  const showUncompletedReminders = () => {\n    setState(\n      { all: false, completed: false, uncompleted: true },\n      showingReminders\n    );\n  };\n\n  const removeElement = (allReminderIndex, completedRemindersIndex) => {\n    let allReminders = allReminders;\n    let completedReminders = completedReminders;\n    allReminders.splice(allReminderIndex, 1);\n    completedReminders.splice(completedRemindersIndex, 1);\n    setState({\n      allReminders: allReminders,\n      completedReminders: completedReminders,\n    });\n    showingReminders();\n  };\n\n  let mainStyle = {\n    height: \"240px\",\n  };\n\n  if (reminders.length >= 1) {\n    mainStyle = {\n      height: 240 + 21.5 * reminders.length,\n    };\n  }\n\n  return (\n    <div className=\"main\" style={mainStyle}>\n      <input\n        type=\"text\"\n        className=\"Task\"\n        onChange={changeNewReminderContent}\n        value={newReminder}\n        placeholder=\"Enter Your New Task\"\n      />\n      <input\n        className=\"addButton\"\n        type=\"button\"\n        onClick={addNewReminder}\n        value=\"Add\"\n      />\n      {reminders.map((item) => {\n        if (item.status === \"completed\") {\n          return (\n            <Completed\n              key={item.ID}\n              task={item.task}\n              click={() =>\n                removeElement(\n                  allReminders.indexOf(item),\n                  completedReminders.indexOf(item)\n                )\n              }\n            />\n          );\n        }\n        return (\n          <ToDo\n            key={item.ID}\n            task={item.task}\n            click={() =>\n              setTimeout(\n                () => markReminderAsCompleted(allReminders.indexOf(item)),\n                500\n              )\n            }\n          />\n        );\n      })}\n      <button className=\"all\" onClick={showAllReminders}>\n        All\n      </button>\n      <button className=\"all\" onClick={showCompletedReminders}>\n        Completed\n      </button>\n      <button className=\"all\" onClick={showUncompletedReminders}>\n        Uncompleted\n      </button>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}