{"ast":null,"code":"var _jsxFileName = \"/Users/sadegh/Desktop/Projects/project-one/functional/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { Component, useState } from \"react\";\nimport ToDo from \"./components/ToDo/ToDo\";\nimport Completed from \"./components/Completed/Completed\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet lastGeneratedKey = 0;\nexport default function App() {\n  _s();\n  const [reminders, setReminders] = useState([]);\n  const [allReminders, setAllReminders] = useState([]);\n  const [completedReminders, setCompletedReminders] = useState([]);\n  const [uncompletedReminders, setUncompletedReminders] = useState([]);\n  const [status, setStatus] = useState([\"true\", \"false\", \"false\"]);\n  const [newReminder, setNewReminder] = useState(\"\");\n  const showingReminders = () => {\n    let arr = [];\n    if (status[0]) {\n      arr = allReminders;\n    } else if (status[1]) {\n      arr = completedReminders;\n    } else if (status[2]) {\n      arr = uncompletedReminders;\n    }\n    setReminders({\n      reminders: arr\n    });\n  };\n  const changeNewReminderContent = event => {\n    setNewReminder({\n      newReminder: event.target.value\n    });\n  };\n  const addNewReminder = () => {\n    const newReminder = {\n      status: \"uncompleted\",\n      task: newReminder,\n      ID: lastGeneratedKey++\n    };\n    setAllReminders(prevState => {\n      const allReminders = [newReminder, ...prevState.allReminders];\n      return {\n        all\n      };\n      const unCompletedReminders = [newReminder, ...prevState.unCompletedReminders];\n      return {\n        allReminders,\n        unCompletedReminders,\n        newReminder: \"\"\n      };\n    }, showingReminders);\n  };\n  const markReminderAsCompleted = reminderIndex => {\n    setState(prevState => {\n      const allReminders = [...prevState.allReminders];\n      allReminders[reminderIndex].status = \"completed\";\n      const completedReminders = allReminders.filter(reminder => reminder.status === \"completed\");\n      const unCompletedReminders = allReminders.filter(reminder => reminder.status === \"uncompleted\");\n      return {\n        allReminders,\n        completedReminders,\n        unCompletedReminders\n      };\n    }, showingReminders);\n  };\n  const showAllReminders = () => {\n    setState({\n      all: true,\n      completed: false,\n      uncompleted: false\n    }, showingReminders);\n  };\n  const showCompletedReminders = () => {\n    setState({\n      all: false,\n      completed: true,\n      uncompleted: false\n    }, showingReminders);\n  };\n  const showUncompletedReminders = () => {\n    setState({\n      all: false,\n      completed: false,\n      uncompleted: true\n    }, showingReminders);\n  };\n  const removeElement = (allReminderIndex, completedRemindersIndex) => {\n    let allReminders = allReminders;\n    let completedReminders = completedReminders;\n    allReminders.splice(allReminderIndex, 1);\n    completedReminders.splice(completedRemindersIndex, 1);\n    setState({\n      allReminders: allReminders,\n      completedReminders: completedReminders\n    });\n    showingReminders();\n  };\n  let mainStyle = {\n    height: \"240px\"\n  };\n  if (reminders.length >= 1) {\n    mainStyle = {\n      height: 240 + 21.5 * reminders.length\n    };\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    style: mainStyle,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      className: \"Task\",\n      onChange: changeNewReminderContent,\n      value: newReminder,\n      placeholder: \"Enter Your New Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"addButton\",\n      type: \"button\",\n      onClick: addNewReminder,\n      value: \"Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 9\n    }, this), reminders.map(item => {\n      if (item.status === \"completed\") {\n        return /*#__PURE__*/_jsxDEV(Completed, {\n          task: item.task,\n          click: () => removeElement(allReminders.indexOf(item), completedReminders.indexOf(item))\n        }, item.ID, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 20\n        }, this);\n      }\n      return /*#__PURE__*/_jsxDEV(ToDo, {\n        task: item.task,\n        click: () => setTimeout(() => markReminderAsCompleted(allReminders.indexOf(item)), 500)\n      }, item.ID, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 13\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"all\",\n      onClick: showAllReminders,\n      children: \"All\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"all\",\n      onClick: showCompletedReminders,\n      children: \"Completed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"all\",\n      onClick: showUncompletedReminders,\n      children: \"Uncompleted\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"1Va6rd7D6OkpqK+dhCKQn5tMepk=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Component","useState","ToDo","Completed","jsxDEV","_jsxDEV","lastGeneratedKey","App","_s","reminders","setReminders","allReminders","setAllReminders","completedReminders","setCompletedReminders","uncompletedReminders","setUncompletedReminders","status","setStatus","newReminder","setNewReminder","showingReminders","arr","changeNewReminderContent","event","target","value","addNewReminder","task","ID","prevState","all","unCompletedReminders","markReminderAsCompleted","reminderIndex","setState","filter","reminder","showAllReminders","completed","uncompleted","showCompletedReminders","showUncompletedReminders","removeElement","allReminderIndex","completedRemindersIndex","splice","mainStyle","height","length","className","style","children","type","onChange","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","item","click","indexOf","setTimeout","_c","$RefreshReg$"],"sources":["/Users/sadegh/Desktop/Projects/project-one/functional/src/App.jsx"],"sourcesContent":["import React, { Component, useState } from \"react\";\nimport ToDo from \"./components/ToDo/ToDo\";\nimport Completed from \"./components/Completed/Completed\";\nimport \"./App.css\";\n\nlet lastGeneratedKey = 0;\n\n\nexport default function App() {\n  \n  const [reminders,setReminders] = useState([])\n  const [allReminders,setAllReminders] = useState([])\n  const [completedReminders,setCompletedReminders] = useState([])\n  const [uncompletedReminders,setUncompletedReminders] = useState([])\n  const [status,setStatus] = useState([\"true\",\"false\",\"false\"])\n  const [newReminder, setNewReminder] = useState(\"\")\n\n  const showingReminders = () => {\n    let arr = [];\n    if (status[0]) {\n      arr = allReminders;\n    } else if (status[1]) {\n      arr = completedReminders;\n    } else if (status[2]) {\n      arr = uncompletedReminders;\n    }\n    setReminders({ reminders: arr });\n  };\n\n  const changeNewReminderContent = (event) => {\n    setNewReminder({ newReminder: event.target.value });\n  };\n\n  const addNewReminder = () => {\n    const newReminder = { status: \"uncompleted\", task: newReminder, ID: lastGeneratedKey++ };\n    setAllReminders((prevState) => {\n      const allReminders = [newReminder, ...prevState.allReminders];\n      return {all}\n      const unCompletedReminders = [newReminder, ...prevState.unCompletedReminders];\n      return { allReminders, unCompletedReminders, newReminder: \"\" };\n    }, showingReminders);\n  };\n\n  const markReminderAsCompleted = (reminderIndex) => {\n    setState((prevState) => {\n      const allReminders = [...prevState.allReminders];\n      allReminders[reminderIndex].status = \"completed\";\n      const completedReminders = allReminders.filter(reminder => reminder.status === \"completed\");\n      const unCompletedReminders = allReminders.filter(reminder => reminder.status === \"uncompleted\");\n      return { allReminders, completedReminders, unCompletedReminders };\n    }, showingReminders);\n  };\n\n  const showAllReminders = () => {\n    setState({ all: true, completed: false, uncompleted: false }, showingReminders);\n  };\n\n  const showCompletedReminders = () => {\n    setState({ all: false, completed: true, uncompleted: false }, showingReminders);\n  };\n\n  const showUncompletedReminders = () => {\n    setState({ all: false, completed: false, uncompleted: true }, showingReminders);\n  };\n\n  const removeElement = (allReminderIndex, completedRemindersIndex) => {\n    let allReminders = allReminders;\n    let completedReminders = completedReminders;\n    allReminders.splice(allReminderIndex,1)\n    completedReminders.splice(completedRemindersIndex,1)\n    setState({ allReminders: allReminders, completedReminders: completedReminders });\n    showingReminders();\n  }; \n\n  let mainStyle = {\n    height: \"240px\",\n  };\n\n  if (reminders.length >= 1) {\n    mainStyle = {\n      height: 240 + 21.5 * (reminders.length),\n    };\n  }\n\n  return (\n    <div className=\"main\" style={mainStyle}>\n        <input\n          type=\"text\"\n          className=\"Task\"\n          onChange={changeNewReminderContent}\n          value={newReminder}\n          placeholder=\"Enter Your New Task\"\n        />\n        <input\n          className=\"addButton\"\n          type=\"button\"\n          onClick={addNewReminder}\n          value=\"Add\"\n        />\n        {reminders.map((item) => {\n          if (item.status === \"completed\") {\n            return <Completed key={item.ID} task={item.task} click={() => removeElement(allReminders.indexOf(item),completedReminders.indexOf(item))} />;\n          }\n          return (\n            <ToDo\n              key={item.ID}\n              task={item.task}\n              click={() => setTimeout(() => markReminderAsCompleted(allReminders.indexOf(item)), 500)}\n            />\n          );\n        })}\n        <button className=\"all\" onClick={showAllReminders}>\n          All\n        </button>\n        <button className=\"all\" onClick={showCompletedReminders}>\n          Completed\n        </button>\n        <button className=\"all\" onClick={showUncompletedReminders}>\n          Uncompleted\n        </button>\n      </div>\n  )\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}