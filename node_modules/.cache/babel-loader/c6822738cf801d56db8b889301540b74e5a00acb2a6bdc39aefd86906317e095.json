{"ast":null,"code":"var _jsxFileName = \"/Users/sadegh/Desktop/Projects/project-one/functional/src/App.jsx\",\n  _s = $RefreshSig$();\nimport React, { Component, useState } from \"react\";\nimport ToDo from \"./components/ToDo/ToDo\";\nimport Completed from \"./components/Completed/Completed\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet lastGeneratedKey = 0;\nexport default function App() {\n  _s();\n  const [reminders, setReminders] = useState([]);\n  const [allReminders, setAllReminders] = useState([]);\n  const [completedReminders, setCompletedReminders] = useState([]);\n  const [uncompletedReminders, setUncompletedReminders] = useState([]);\n  const [status, setStatus] = useState([\"true\", \"false\", \"false\"]);\n  const [newReminder, setNewReminder] = useState(\"\");\n  const showingReminders = () => {\n    let arr = [];\n    if (status[0]) {\n      arr = allReminders;\n    } else if (status[1]) {\n      arr = completedReminders;\n    } else if (status[2]) {\n      arr = unCompletedReminders;\n    }\n    this.setState({\n      reminders: arr\n    });\n  };\n  const changeNewReminderContent = event => {\n    this.setState({\n      newReminder: event.target.value\n    });\n  };\n  const addNewReminder = () => {\n    const newReminder = {\n      status: \"uncompleted\",\n      task: newReminder,\n      ID: lastGeneratedKey++\n    };\n    this.setState(prevState => {\n      const allReminders = [newReminder, ...prevState.allReminders];\n      const unCompletedReminders = [newReminder, ...prevState.unCompletedReminders];\n      return {\n        allReminders,\n        unCompletedReminders,\n        newReminder: \"\"\n      };\n    }, this.showingReminders);\n  };\n  markReminderAsCompleted = reminderIndex => {\n    this.setState(prevState => {\n      const allReminders = [...prevState.allReminders];\n      allReminders[reminderIndex].status = \"completed\";\n      const completedReminders = allReminders.filter(reminder => reminder.status === \"completed\");\n      const unCompletedReminders = allReminders.filter(reminder => reminder.status === \"uncompleted\");\n      return {\n        allReminders,\n        completedReminders,\n        unCompletedReminders\n      };\n    }, this.showingReminders);\n  };\n  showAllReminders = () => {\n    this.setState({\n      all: true,\n      completed: false,\n      uncompleted: false\n    }, showingReminders);\n  };\n  showCompletedReminders = () => {\n    this.setState({\n      all: false,\n      completed: true,\n      uncompleted: false\n    }, this.showingReminders);\n  };\n  showUncompletedReminders = () => {\n    this.setState({\n      all: false,\n      completed: false,\n      uncompleted: true\n    }, this.showingReminders);\n  };\n  removeElement = (allReminderIndex, completedRemindersIndex) => {\n    let allReminders = allReminders;\n    let completedReminders = completedReminders;\n    allReminders.splice(allReminderIndex, 1);\n    completedReminders.splice(completedRemindersIndex, 1);\n    this.setState({\n      allReminders: allReminders,\n      completedReminders: completedReminders\n    });\n    this.showingReminders();\n  };\n  let mainStyle = {\n    height: \"240px\"\n  };\n  if (reminders.length >= 1) {\n    mainStyle = {\n      height: 240 + 21.5 * reminders.length\n    };\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"main\",\n    style: mainStyle,\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      className: \"Task\",\n      onChange: this.changeNewReminderContent,\n      value: newReminder,\n      placeholder: \"Enter Your New Task\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"addButton\",\n      type: \"button\",\n      onClick: this.addNewReminder,\n      value: \"Add\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this), reminders.map(item => {\n      if (item.status === \"completed\") {\n        return /*#__PURE__*/_jsxDEV(Completed, {\n          task: item.task,\n          click: () => this.removeElement(allReminders.indexOf(item), completedReminders.indexOf(item))\n        }, item.ID, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 20\n        }, this);\n      }\n      return /*#__PURE__*/_jsxDEV(ToDo, {\n        task: item.task,\n        click: () => setTimeout(() => this.markReminderAsCompleted(allReminders.indexOf(item)), 500)\n      }, item.ID, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 13\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"all\",\n      onClick: this.showAllReminders,\n      children: \"All\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"all\",\n      onClick: this.showCompletedReminders,\n      children: \"Completed\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"all\",\n      onClick: this.showUncompletedReminders,\n      children: \"Uncompleted\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"1Va6rd7D6OkpqK+dhCKQn5tMepk=\");\n_c = App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","Component","useState","ToDo","Completed","jsxDEV","_jsxDEV","lastGeneratedKey","App","_s","reminders","setReminders","allReminders","setAllReminders","completedReminders","setCompletedReminders","uncompletedReminders","setUncompletedReminders","status","setStatus","newReminder","setNewReminder","showingReminders","arr","unCompletedReminders","setState","changeNewReminderContent","event","target","value","addNewReminder","task","ID","prevState","markReminderAsCompleted","reminderIndex","filter","reminder","showAllReminders","all","completed","uncompleted","showCompletedReminders","showUncompletedReminders","removeElement","allReminderIndex","completedRemindersIndex","splice","mainStyle","height","length","className","style","children","type","onChange","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","item","click","indexOf","setTimeout","_c","$RefreshReg$"],"sources":["/Users/sadegh/Desktop/Projects/project-one/functional/src/App.jsx"],"sourcesContent":["import React, { Component, useState } from \"react\";\nimport ToDo from \"./components/ToDo/ToDo\";\nimport Completed from \"./components/Completed/Completed\";\nimport \"./App.css\";\n\nlet lastGeneratedKey = 0;\n\n\nexport default function App() {\n  \n  const [reminders,setReminders] = useState([])\n  const [allReminders,setAllReminders] = useState([])\n  const [completedReminders,setCompletedReminders] = useState([])\n  const [uncompletedReminders,setUncompletedReminders] = useState([])\n  const [status,setStatus] = useState([\"true\",\"false\",\"false\"])\n  const [newReminder, setNewReminder] = useState(\"\")\n\n  const showingReminders = () => {\n    let arr = [];\n    if (status[0]) {\n      arr = allReminders;\n    } else if (status[1]) {\n      arr = completedReminders;\n    } else if (status[2]) {\n      arr = unCompletedReminders;\n    }\n    this.setState({ reminders: arr });\n  };\n\n  const changeNewReminderContent = (event) => {\n    this.setState({ newReminder: event.target.value });\n  };\n\n  const addNewReminder = () => {\n    const newReminder = { status: \"uncompleted\", task: newReminder, ID: lastGeneratedKey++ };\n    this.setState((prevState) => {\n      const allReminders = [newReminder, ...prevState.allReminders];\n      const unCompletedReminders = [newReminder, ...prevState.unCompletedReminders];\n      return { allReminders, unCompletedReminders, newReminder: \"\" };\n    }, this.showingReminders);\n  };\n\n  markReminderAsCompleted = (reminderIndex) => {\n    this.setState((prevState) => {\n      const allReminders = [...prevState.allReminders];\n      allReminders[reminderIndex].status = \"completed\";\n      const completedReminders = allReminders.filter(reminder => reminder.status === \"completed\");\n      const unCompletedReminders = allReminders.filter(reminder => reminder.status === \"uncompleted\");\n      return { allReminders, completedReminders, unCompletedReminders };\n    }, this.showingReminders);\n  };\n\n  showAllReminders = () => {\n    this.setState({ all: true, completed: false, uncompleted: false }, showingReminders);\n  };\n\n  showCompletedReminders = () => {\n    this.setState({ all: false, completed: true, uncompleted: false }, this.showingReminders);\n  };\n\n  showUncompletedReminders = () => {\n    this.setState({ all: false, completed: false, uncompleted: true }, this.showingReminders);\n  };\n\n  removeElement = (allReminderIndex, completedRemindersIndex) => {\n    let allReminders = allReminders;\n    let completedReminders = completedReminders;\n    allReminders.splice(allReminderIndex,1)\n    completedReminders.splice(completedRemindersIndex,1)\n    this.setState({ allReminders: allReminders, completedReminders: completedReminders });\n    this.showingReminders();\n  }; \n\n  let mainStyle = {\n    height: \"240px\",\n  };\n\n  if (reminders.length >= 1) {\n    mainStyle = {\n      height: 240 + 21.5 * (reminders.length),\n    };\n  }\n\n  return (\n    <div className=\"main\" style={mainStyle}>\n        <input\n          type=\"text\"\n          className=\"Task\"\n          onChange={this.changeNewReminderContent}\n          value={newReminder}\n          placeholder=\"Enter Your New Task\"\n        />\n        <input\n          className=\"addButton\"\n          type=\"button\"\n          onClick={this.addNewReminder}\n          value=\"Add\"\n        />\n        {reminders.map((item) => {\n          if (item.status === \"completed\") {\n            return <Completed key={item.ID} task={item.task} click={() => this.removeElement(allReminders.indexOf(item),completedReminders.indexOf(item))} />;\n          }\n          return (\n            <ToDo\n              key={item.ID}\n              task={item.task}\n              click={() => setTimeout(() => this.markReminderAsCompleted(allReminders.indexOf(item)), 500)}\n            />\n          );\n        })}\n        <button className=\"all\" onClick={this.showAllReminders}>\n          All\n        </button>\n        <button className=\"all\" onClick={this.showCompletedReminders}>\n          Completed\n        </button>\n        <button className=\"all\" onClick={this.showUncompletedReminders}>\n          Uncompleted\n        </button>\n      </div>\n  )\n}"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,wBAAwB;AACzC,OAAOC,SAAS,MAAM,kCAAkC;AACxD,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,IAAIC,gBAAgB,GAAG,CAAC;AAGxB,eAAe,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAE5B,MAAM,CAACC,SAAS,EAACC,YAAY,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC7C,MAAM,CAACU,YAAY,EAACC,eAAe,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACnD,MAAM,CAACY,kBAAkB,EAACC,qBAAqB,CAAC,GAAGb,QAAQ,CAAC,EAAE,CAAC;EAC/D,MAAM,CAACc,oBAAoB,EAACC,uBAAuB,CAAC,GAAGf,QAAQ,CAAC,EAAE,CAAC;EACnE,MAAM,CAACgB,MAAM,EAACC,SAAS,CAAC,GAAGjB,QAAQ,CAAC,CAAC,MAAM,EAAC,OAAO,EAAC,OAAO,CAAC,CAAC;EAC7D,MAAM,CAACkB,WAAW,EAAEC,cAAc,CAAC,GAAGnB,QAAQ,CAAC,EAAE,CAAC;EAElD,MAAMoB,gBAAgB,GAAGA,CAAA,KAAM;IAC7B,IAAIC,GAAG,GAAG,EAAE;IACZ,IAAIL,MAAM,CAAC,CAAC,CAAC,EAAE;MACbK,GAAG,GAAGX,YAAY;IACpB,CAAC,MAAM,IAAIM,MAAM,CAAC,CAAC,CAAC,EAAE;MACpBK,GAAG,GAAGT,kBAAkB;IAC1B,CAAC,MAAM,IAAII,MAAM,CAAC,CAAC,CAAC,EAAE;MACpBK,GAAG,GAAGC,oBAAoB;IAC5B;IACA,IAAI,CAACC,QAAQ,CAAC;MAAEf,SAAS,EAAEa;IAAI,CAAC,CAAC;EACnC,CAAC;EAED,MAAMG,wBAAwB,GAAIC,KAAK,IAAK;IAC1C,IAAI,CAACF,QAAQ,CAAC;MAAEL,WAAW,EAAEO,KAAK,CAACC,MAAM,CAACC;IAAM,CAAC,CAAC;EACpD,CAAC;EAED,MAAMC,cAAc,GAAGA,CAAA,KAAM;IAC3B,MAAMV,WAAW,GAAG;MAAEF,MAAM,EAAE,aAAa;MAAEa,IAAI,EAAEX,WAAW;MAAEY,EAAE,EAAEzB,gBAAgB;IAAG,CAAC;IACxF,IAAI,CAACkB,QAAQ,CAAEQ,SAAS,IAAK;MAC3B,MAAMrB,YAAY,GAAG,CAACQ,WAAW,EAAE,GAAGa,SAAS,CAACrB,YAAY,CAAC;MAC7D,MAAMY,oBAAoB,GAAG,CAACJ,WAAW,EAAE,GAAGa,SAAS,CAACT,oBAAoB,CAAC;MAC7E,OAAO;QAAEZ,YAAY;QAAEY,oBAAoB;QAAEJ,WAAW,EAAE;MAAG,CAAC;IAChE,CAAC,EAAE,IAAI,CAACE,gBAAgB,CAAC;EAC3B,CAAC;EAEDY,uBAAuB,GAAIC,aAAa,IAAK;IAC3C,IAAI,CAACV,QAAQ,CAAEQ,SAAS,IAAK;MAC3B,MAAMrB,YAAY,GAAG,CAAC,GAAGqB,SAAS,CAACrB,YAAY,CAAC;MAChDA,YAAY,CAACuB,aAAa,CAAC,CAACjB,MAAM,GAAG,WAAW;MAChD,MAAMJ,kBAAkB,GAAGF,YAAY,CAACwB,MAAM,CAACC,QAAQ,IAAIA,QAAQ,CAACnB,MAAM,KAAK,WAAW,CAAC;MAC3F,MAAMM,oBAAoB,GAAGZ,YAAY,CAACwB,MAAM,CAACC,QAAQ,IAAIA,QAAQ,CAACnB,MAAM,KAAK,aAAa,CAAC;MAC/F,OAAO;QAAEN,YAAY;QAAEE,kBAAkB;QAAEU;MAAqB,CAAC;IACnE,CAAC,EAAE,IAAI,CAACF,gBAAgB,CAAC;EAC3B,CAAC;EAEDgB,gBAAgB,GAAGA,CAAA,KAAM;IACvB,IAAI,CAACb,QAAQ,CAAC;MAAEc,GAAG,EAAE,IAAI;MAAEC,SAAS,EAAE,KAAK;MAAEC,WAAW,EAAE;IAAM,CAAC,EAAEnB,gBAAgB,CAAC;EACtF,CAAC;EAEDoB,sBAAsB,GAAGA,CAAA,KAAM;IAC7B,IAAI,CAACjB,QAAQ,CAAC;MAAEc,GAAG,EAAE,KAAK;MAAEC,SAAS,EAAE,IAAI;MAAEC,WAAW,EAAE;IAAM,CAAC,EAAE,IAAI,CAACnB,gBAAgB,CAAC;EAC3F,CAAC;EAEDqB,wBAAwB,GAAGA,CAAA,KAAM;IAC/B,IAAI,CAAClB,QAAQ,CAAC;MAAEc,GAAG,EAAE,KAAK;MAAEC,SAAS,EAAE,KAAK;MAAEC,WAAW,EAAE;IAAK,CAAC,EAAE,IAAI,CAACnB,gBAAgB,CAAC;EAC3F,CAAC;EAEDsB,aAAa,GAAGA,CAACC,gBAAgB,EAAEC,uBAAuB,KAAK;IAC7D,IAAIlC,YAAY,GAAGA,YAAY;IAC/B,IAAIE,kBAAkB,GAAGA,kBAAkB;IAC3CF,YAAY,CAACmC,MAAM,CAACF,gBAAgB,EAAC,CAAC,CAAC;IACvC/B,kBAAkB,CAACiC,MAAM,CAACD,uBAAuB,EAAC,CAAC,CAAC;IACpD,IAAI,CAACrB,QAAQ,CAAC;MAAEb,YAAY,EAAEA,YAAY;MAAEE,kBAAkB,EAAEA;IAAmB,CAAC,CAAC;IACrF,IAAI,CAACQ,gBAAgB,CAAC,CAAC;EACzB,CAAC;EAED,IAAI0B,SAAS,GAAG;IACdC,MAAM,EAAE;EACV,CAAC;EAED,IAAIvC,SAAS,CAACwC,MAAM,IAAI,CAAC,EAAE;IACzBF,SAAS,GAAG;MACVC,MAAM,EAAE,GAAG,GAAG,IAAI,GAAIvC,SAAS,CAACwC;IAClC,CAAC;EACH;EAEA,oBACE5C,OAAA;IAAK6C,SAAS,EAAC,MAAM;IAACC,KAAK,EAAEJ,SAAU;IAAAK,QAAA,gBACnC/C,OAAA;MACEgD,IAAI,EAAC,MAAM;MACXH,SAAS,EAAC,MAAM;MAChBI,QAAQ,EAAE,IAAI,CAAC7B,wBAAyB;MACxCG,KAAK,EAAET,WAAY;MACnBoC,WAAW,EAAC;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClC,CAAC,eACFtD,OAAA;MACE6C,SAAS,EAAC,WAAW;MACrBG,IAAI,EAAC,QAAQ;MACbO,OAAO,EAAE,IAAI,CAAC/B,cAAe;MAC7BD,KAAK,EAAC;IAAK;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACZ,CAAC,EACDlD,SAAS,CAACoD,GAAG,CAAEC,IAAI,IAAK;MACvB,IAAIA,IAAI,CAAC7C,MAAM,KAAK,WAAW,EAAE;QAC/B,oBAAOZ,OAAA,CAACF,SAAS;UAAe2B,IAAI,EAAEgC,IAAI,CAAChC,IAAK;UAACiC,KAAK,EAAEA,CAAA,KAAM,IAAI,CAACpB,aAAa,CAAChC,YAAY,CAACqD,OAAO,CAACF,IAAI,CAAC,EAACjD,kBAAkB,CAACmD,OAAO,CAACF,IAAI,CAAC;QAAE,GAAvHA,IAAI,CAAC/B,EAAE;UAAAyB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAkH,CAAC;MACnJ;MACA,oBACEtD,OAAA,CAACH,IAAI;QAEH4B,IAAI,EAAEgC,IAAI,CAAChC,IAAK;QAChBiC,KAAK,EAAEA,CAAA,KAAME,UAAU,CAAC,MAAM,IAAI,CAAChC,uBAAuB,CAACtB,YAAY,CAACqD,OAAO,CAACF,IAAI,CAAC,CAAC,EAAE,GAAG;MAAE,GAFxFA,IAAI,CAAC/B,EAAE;QAAAyB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGb,CAAC;IAEN,CAAC,CAAC,eACFtD,OAAA;MAAQ6C,SAAS,EAAC,KAAK;MAACU,OAAO,EAAE,IAAI,CAACvB,gBAAiB;MAAAe,QAAA,EAAC;IAExD;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACTtD,OAAA;MAAQ6C,SAAS,EAAC,KAAK;MAACU,OAAO,EAAE,IAAI,CAACnB,sBAAuB;MAAAW,QAAA,EAAC;IAE9D;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACTtD,OAAA;MAAQ6C,SAAS,EAAC,KAAK;MAACU,OAAO,EAAE,IAAI,CAAClB,wBAAyB;MAAAU,QAAA,EAAC;IAEhE;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACN,CAAC;AAEZ;AAACnD,EAAA,CAjHuBD,GAAG;AAAA2D,EAAA,GAAH3D,GAAG;AAAA,IAAA2D,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}