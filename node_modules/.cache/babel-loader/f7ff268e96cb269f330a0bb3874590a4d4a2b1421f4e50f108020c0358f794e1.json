{"ast":null,"code":"var _jsxFileName = \"/Users/sadegh/Desktop/trying/src/App.jsx\";\nimport React, { Component } from \"react\";\nimport ToDo from \"./components/ToDo/ToDo\";\nimport Completed from \"./components/Completed/Completed\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet lastGeneratedKey = 0;\nfunction searchForElement(array, key) {\n  return array.filter(item => item.key !== key);\n}\nexport default class App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      reminders: [],\n      allReminders: [],\n      completedReminders: [],\n      unCompletedReminders: [],\n      all: true,\n      completed: false,\n      uncompleted: false,\n      newReminder: \"\"\n    };\n    this.showingReminders = () => {\n      let arr = [];\n      if (this.state.all) {\n        arr = this.state.allReminders;\n      } else if (this.state.completed) {\n        arr = this.state.completedReminders;\n      } else if (this.state.uncompleted) {\n        arr = this.state.unCompletedReminders;\n      }\n      this.setState({\n        reminders: arr\n      });\n    };\n    this.changeNewReminderContent = event => {\n      this.setState({\n        newReminder: event.target.value\n      });\n    };\n    this.addNewReminder = () => {\n      const newReminder = {\n        status: \"uncompleted\",\n        task: this.state.newReminder,\n        key: lastGeneratedKey++\n      };\n      this.setState(prevState => {\n        const allReminders = [newReminder, ...prevState.allReminders];\n        const unCompletedReminders = [newReminder, ...prevState.unCompletedReminders];\n        return {\n          allReminders,\n          unCompletedReminders,\n          newReminder: \"\"\n        };\n      }, this.showingReminders);\n    };\n    this.markReminderAsCompleted = reminderIndex => {\n      this.setState(prevState => {\n        const allReminders = [...prevState.allReminders];\n        allReminders[reminderIndex].status = \"completed\";\n        const completedReminders = allReminders.filter(reminder => reminder.status === \"completed\");\n        const unCompletedReminders = allReminders.filter(reminder => reminder.status === \"uncompleted\");\n        return {\n          allReminders,\n          completedReminders,\n          unCompletedReminders\n        };\n      }, this.showingReminders);\n    };\n    this.showAllReminders = () => {\n      this.setState({\n        all: true,\n        completed: false,\n        uncompleted: false\n      }, this.showingReminders);\n    };\n    this.showCompletedReminders = () => {\n      this.setState({\n        all: false,\n        completed: true,\n        uncompleted: false\n      }, this.showingReminders);\n    };\n    this.showUncompletedReminders = () => {\n      this.setState({\n        all: false,\n        completed: false,\n        uncompleted: true\n      }, this.showingReminders);\n    };\n    this.removeElement = key => {\n      console.log(\"remove\");\n      let allReminders = this.state.allReminders;\n      let completedReminders = this.state.completedReminders;\n      allReminders = searchForElement(allReminders, key);\n      completedReminders = searchForElement(completedReminders, key);\n      this.setState({\n        allReminders: allReminders,\n        completedReminders: completedReminders\n      });\n      this.showingReminders();\n    };\n  }\n  render() {\n    let mainStyle = {\n      height: \"160px\"\n    };\n    if (this.state.reminders.length >= 1) {\n      mainStyle = {\n        height: 160 + 21.5 * this.state.reminders.length\n      };\n    }\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main\",\n      style: mainStyle,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        className: \"Task\",\n        onChange: this.changeNewReminderContent,\n        value: this.state.newReminder,\n        placeholder: \"Enter Your New Task\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        className: \"addButton\",\n        type: \"button\",\n        onClick: this.addNewReminder,\n        value: \"Add\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), this.state.reminders.map(item => {\n        if (item.status === \"completed\") {\n          return /*#__PURE__*/_jsxDEV(Completed, {\n            task: item.task,\n            click: () => this.removeElement(item.key)\n          }, item.key, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 20\n          }, this);\n        }\n        return /*#__PURE__*/_jsxDEV(ToDo, {\n          task: item.task,\n          click: () => setTimeout(() => this.markReminderAsCompleted(this.state.allReminders.indexOf(item)), 500)\n        }, item.key, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 13\n        }, this);\n      }), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"all\",\n        onClick: this.showAllReminders,\n        children: \"All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"completed\",\n        onClick: this.showCompletedReminders,\n        children: \"Completed\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"uncompleted\",\n        onClick: this.showUncompletedReminders,\n        children: \"Uncompleted\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","ToDo","Completed","jsxDEV","_jsxDEV","lastGeneratedKey","searchForElement","array","key","filter","item","App","constructor","args","state","reminders","allReminders","completedReminders","unCompletedReminders","all","completed","uncompleted","newReminder","showingReminders","arr","setState","changeNewReminderContent","event","target","value","addNewReminder","status","task","prevState","markReminderAsCompleted","reminderIndex","reminder","showAllReminders","showCompletedReminders","showUncompletedReminders","removeElement","console","log","render","mainStyle","height","length","className","style","children","type","onChange","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","click","setTimeout","indexOf"],"sources":["/Users/sadegh/Desktop/trying/src/App.jsx"],"sourcesContent":["import React, { Component } from \"react\";\nimport ToDo from \"./components/ToDo/ToDo\";\nimport Completed from \"./components/Completed/Completed\";\nimport \"./App.css\";\n\nlet lastGeneratedKey = 0;\n\nfunction searchForElement(array, key) {\n  return array.filter(item => item.key !== key);\n}\n\nexport default class App extends Component {\n  state = {\n    reminders: [],\n    allReminders: [],\n    completedReminders: [],\n    unCompletedReminders: [],\n    all: true,\n    completed: false,\n    uncompleted: false,\n    newReminder: \"\",\n  };\n\n  showingReminders = () => {\n    let arr = [];\n    if (this.state.all) {\n      arr = this.state.allReminders;\n    } else if (this.state.completed) {\n      arr = this.state.completedReminders;\n    } else if (this.state.uncompleted) {\n      arr = this.state.unCompletedReminders;\n    }\n    this.setState({ reminders: arr });\n  };\n\n  changeNewReminderContent = (event) => {\n    this.setState({ newReminder: event.target.value });\n  };\n\n  addNewReminder = () => {\n    const newReminder = { status: \"uncompleted\", task: this.state.newReminder, key: lastGeneratedKey++ };\n    this.setState((prevState) => {\n      const allReminders = [newReminder, ...prevState.allReminders];\n      const unCompletedReminders = [newReminder, ...prevState.unCompletedReminders];\n      return { allReminders, unCompletedReminders, newReminder: \"\" };\n    }, this.showingReminders);\n  };\n\n  markReminderAsCompleted = (reminderIndex) => {\n    this.setState((prevState) => {\n      const allReminders = [...prevState.allReminders];\n      allReminders[reminderIndex].status = \"completed\";\n      const completedReminders = allReminders.filter(reminder => reminder.status === \"completed\");\n      const unCompletedReminders = allReminders.filter(reminder => reminder.status === \"uncompleted\");\n      return { allReminders, completedReminders, unCompletedReminders };\n    }, this.showingReminders);\n  };\n\n  showAllReminders = () => {\n    this.setState({ all: true, completed: false, uncompleted: false }, this.showingReminders);\n  };\n\n  showCompletedReminders = () => {\n    this.setState({ all: false, completed: true, uncompleted: false }, this.showingReminders);\n  };\n\n  showUncompletedReminders = () => {\n    this.setState({ all: false, completed: false, uncompleted: true }, this.showingReminders);\n  };\n\n  removeElement = (key) => {\n    console.log(\"remove\")\n    let allReminders = this.state.allReminders\n    let completedReminders = this.state.completedReminders\n    allReminders = searchForElement(allReminders, key)\n    completedReminders = searchForElement(completedReminders, key)\n    this.setState({allReminders: allReminders, completedReminders: completedReminders})\n    this.showingReminders();\n  };\n\n  render() {\n    let mainStyle = {\n      height: \"160px\",\n    };\n\n    if (this.state.reminders.length >= 1) {\n      mainStyle = {\n        height: 160 + 21.5 * (this.state.reminders.length),\n      };\n    }\n\n    return (\n      <div className=\"main\" style={mainStyle}>\n        <input\n          type=\"text\"\n          className=\"Task\"\n          onChange={this.changeNewReminderContent}\n          value={this.state.newReminder}\n          placeholder=\"Enter Your New Task\"\n        />\n        <input\n          className=\"addButton\"\n          type=\"button\"\n          onClick={this.addNewReminder}\n          value=\"Add\"\n        />\n        {this.state.reminders.map((item) => {\n          if (item.status === \"completed\") {\n            return <Completed key={item.key} task={item.task} click={() => this.removeElement(item.key)} />;\n          }\n          return (\n            <ToDo\n              key={item.key}\n              task={item.task}\n              click={() => setTimeout(() => this.markReminderAsCompleted(this.state.allReminders.indexOf(item)), 500)}\n            />\n          );\n        })}\n        <button className=\"all\" onClick={this.showAllReminders}>\n          All\n        </button>\n        <button className=\"completed\" onClick={this.showCompletedReminders}>\n          Completed\n        </button>\n        <button className=\"uncompleted\" onClick={this.showUncompletedReminders}>\n          Uncompleted\n        </button>\n      </div>\n    );\n  }\n}\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,IAAI,MAAM,wBAAwB;AACzC,OAAOC,SAAS,MAAM,kCAAkC;AACxD,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,IAAIC,gBAAgB,GAAG,CAAC;AAExB,SAASC,gBAAgBA,CAACC,KAAK,EAAEC,GAAG,EAAE;EACpC,OAAOD,KAAK,CAACE,MAAM,CAACC,IAAI,IAAIA,IAAI,CAACF,GAAG,KAAKA,GAAG,CAAC;AAC/C;AAEA,eAAe,MAAMG,GAAG,SAASX,SAAS,CAAC;EAAAY,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAAA,KACzCC,KAAK,GAAG;MACNC,SAAS,EAAE,EAAE;MACbC,YAAY,EAAE,EAAE;MAChBC,kBAAkB,EAAE,EAAE;MACtBC,oBAAoB,EAAE,EAAE;MACxBC,GAAG,EAAE,IAAI;MACTC,SAAS,EAAE,KAAK;MAChBC,WAAW,EAAE,KAAK;MAClBC,WAAW,EAAE;IACf,CAAC;IAAA,KAEDC,gBAAgB,GAAG,MAAM;MACvB,IAAIC,GAAG,GAAG,EAAE;MACZ,IAAI,IAAI,CAACV,KAAK,CAACK,GAAG,EAAE;QAClBK,GAAG,GAAG,IAAI,CAACV,KAAK,CAACE,YAAY;MAC/B,CAAC,MAAM,IAAI,IAAI,CAACF,KAAK,CAACM,SAAS,EAAE;QAC/BI,GAAG,GAAG,IAAI,CAACV,KAAK,CAACG,kBAAkB;MACrC,CAAC,MAAM,IAAI,IAAI,CAACH,KAAK,CAACO,WAAW,EAAE;QACjCG,GAAG,GAAG,IAAI,CAACV,KAAK,CAACI,oBAAoB;MACvC;MACA,IAAI,CAACO,QAAQ,CAAC;QAAEV,SAAS,EAAES;MAAI,CAAC,CAAC;IACnC,CAAC;IAAA,KAEDE,wBAAwB,GAAIC,KAAK,IAAK;MACpC,IAAI,CAACF,QAAQ,CAAC;QAAEH,WAAW,EAAEK,KAAK,CAACC,MAAM,CAACC;MAAM,CAAC,CAAC;IACpD,CAAC;IAAA,KAEDC,cAAc,GAAG,MAAM;MACrB,MAAMR,WAAW,GAAG;QAAES,MAAM,EAAE,aAAa;QAAEC,IAAI,EAAE,IAAI,CAAClB,KAAK,CAACQ,WAAW;QAAEd,GAAG,EAAEH,gBAAgB;MAAG,CAAC;MACpG,IAAI,CAACoB,QAAQ,CAAEQ,SAAS,IAAK;QAC3B,MAAMjB,YAAY,GAAG,CAACM,WAAW,EAAE,GAAGW,SAAS,CAACjB,YAAY,CAAC;QAC7D,MAAME,oBAAoB,GAAG,CAACI,WAAW,EAAE,GAAGW,SAAS,CAACf,oBAAoB,CAAC;QAC7E,OAAO;UAAEF,YAAY;UAAEE,oBAAoB;UAAEI,WAAW,EAAE;QAAG,CAAC;MAChE,CAAC,EAAE,IAAI,CAACC,gBAAgB,CAAC;IAC3B,CAAC;IAAA,KAEDW,uBAAuB,GAAIC,aAAa,IAAK;MAC3C,IAAI,CAACV,QAAQ,CAAEQ,SAAS,IAAK;QAC3B,MAAMjB,YAAY,GAAG,CAAC,GAAGiB,SAAS,CAACjB,YAAY,CAAC;QAChDA,YAAY,CAACmB,aAAa,CAAC,CAACJ,MAAM,GAAG,WAAW;QAChD,MAAMd,kBAAkB,GAAGD,YAAY,CAACP,MAAM,CAAC2B,QAAQ,IAAIA,QAAQ,CAACL,MAAM,KAAK,WAAW,CAAC;QAC3F,MAAMb,oBAAoB,GAAGF,YAAY,CAACP,MAAM,CAAC2B,QAAQ,IAAIA,QAAQ,CAACL,MAAM,KAAK,aAAa,CAAC;QAC/F,OAAO;UAAEf,YAAY;UAAEC,kBAAkB;UAAEC;QAAqB,CAAC;MACnE,CAAC,EAAE,IAAI,CAACK,gBAAgB,CAAC;IAC3B,CAAC;IAAA,KAEDc,gBAAgB,GAAG,MAAM;MACvB,IAAI,CAACZ,QAAQ,CAAC;QAAEN,GAAG,EAAE,IAAI;QAAEC,SAAS,EAAE,KAAK;QAAEC,WAAW,EAAE;MAAM,CAAC,EAAE,IAAI,CAACE,gBAAgB,CAAC;IAC3F,CAAC;IAAA,KAEDe,sBAAsB,GAAG,MAAM;MAC7B,IAAI,CAACb,QAAQ,CAAC;QAAEN,GAAG,EAAE,KAAK;QAAEC,SAAS,EAAE,IAAI;QAAEC,WAAW,EAAE;MAAM,CAAC,EAAE,IAAI,CAACE,gBAAgB,CAAC;IAC3F,CAAC;IAAA,KAEDgB,wBAAwB,GAAG,MAAM;MAC/B,IAAI,CAACd,QAAQ,CAAC;QAAEN,GAAG,EAAE,KAAK;QAAEC,SAAS,EAAE,KAAK;QAAEC,WAAW,EAAE;MAAK,CAAC,EAAE,IAAI,CAACE,gBAAgB,CAAC;IAC3F,CAAC;IAAA,KAEDiB,aAAa,GAAIhC,GAAG,IAAK;MACvBiC,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;MACrB,IAAI1B,YAAY,GAAG,IAAI,CAACF,KAAK,CAACE,YAAY;MAC1C,IAAIC,kBAAkB,GAAG,IAAI,CAACH,KAAK,CAACG,kBAAkB;MACtDD,YAAY,GAAGV,gBAAgB,CAACU,YAAY,EAAER,GAAG,CAAC;MAClDS,kBAAkB,GAAGX,gBAAgB,CAACW,kBAAkB,EAAET,GAAG,CAAC;MAC9D,IAAI,CAACiB,QAAQ,CAAC;QAACT,YAAY,EAAEA,YAAY;QAAEC,kBAAkB,EAAEA;MAAkB,CAAC,CAAC;MACnF,IAAI,CAACM,gBAAgB,CAAC,CAAC;IACzB,CAAC;EAAA;EAEDoB,MAAMA,CAAA,EAAG;IACP,IAAIC,SAAS,GAAG;MACdC,MAAM,EAAE;IACV,CAAC;IAED,IAAI,IAAI,CAAC/B,KAAK,CAACC,SAAS,CAAC+B,MAAM,IAAI,CAAC,EAAE;MACpCF,SAAS,GAAG;QACVC,MAAM,EAAE,GAAG,GAAG,IAAI,GAAI,IAAI,CAAC/B,KAAK,CAACC,SAAS,CAAC+B;MAC7C,CAAC;IACH;IAEA,oBACE1C,OAAA;MAAK2C,SAAS,EAAC,MAAM;MAACC,KAAK,EAAEJ,SAAU;MAAAK,QAAA,gBACrC7C,OAAA;QACE8C,IAAI,EAAC,MAAM;QACXH,SAAS,EAAC,MAAM;QAChBI,QAAQ,EAAE,IAAI,CAACzB,wBAAyB;QACxCG,KAAK,EAAE,IAAI,CAACf,KAAK,CAACQ,WAAY;QAC9B8B,WAAW,EAAC;MAAqB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClC,CAAC,eACFpD,OAAA;QACE2C,SAAS,EAAC,WAAW;QACrBG,IAAI,EAAC,QAAQ;QACbO,OAAO,EAAE,IAAI,CAAC3B,cAAe;QAC7BD,KAAK,EAAC;MAAK;QAAAwB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACZ,CAAC,EACD,IAAI,CAAC1C,KAAK,CAACC,SAAS,CAAC2C,GAAG,CAAEhD,IAAI,IAAK;QAClC,IAAIA,IAAI,CAACqB,MAAM,KAAK,WAAW,EAAE;UAC/B,oBAAO3B,OAAA,CAACF,SAAS;YAAgB8B,IAAI,EAAEtB,IAAI,CAACsB,IAAK;YAAC2B,KAAK,EAAEA,CAAA,KAAM,IAAI,CAACnB,aAAa,CAAC9B,IAAI,CAACF,GAAG;UAAE,GAArEE,IAAI,CAACF,GAAG;YAAA6C,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAA+D,CAAC;QACjG;QACA,oBACEpD,OAAA,CAACH,IAAI;UAEH+B,IAAI,EAAEtB,IAAI,CAACsB,IAAK;UAChB2B,KAAK,EAAEA,CAAA,KAAMC,UAAU,CAAC,MAAM,IAAI,CAAC1B,uBAAuB,CAAC,IAAI,CAACpB,KAAK,CAACE,YAAY,CAAC6C,OAAO,CAACnD,IAAI,CAAC,CAAC,EAAE,GAAG;QAAE,GAFnGA,IAAI,CAACF,GAAG;UAAA6C,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAGd,CAAC;MAEN,CAAC,CAAC,eACFpD,OAAA;QAAQ2C,SAAS,EAAC,KAAK;QAACU,OAAO,EAAE,IAAI,CAACpB,gBAAiB;QAAAY,QAAA,EAAC;MAExD;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTpD,OAAA;QAAQ2C,SAAS,EAAC,WAAW;QAACU,OAAO,EAAE,IAAI,CAACnB,sBAAuB;QAAAW,QAAA,EAAC;MAEpE;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC,eACTpD,OAAA;QAAQ2C,SAAS,EAAC,aAAa;QAACU,OAAO,EAAE,IAAI,CAAClB,wBAAyB;QAAAU,QAAA,EAAC;MAExE;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC;EAEV;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}